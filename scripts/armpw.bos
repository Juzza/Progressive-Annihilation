#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, ruparm, luparm, rfire, lfire, rloarm, lloarm, pelvis,
       rthigh, lthigh, lleg, rleg, rfoot, lfoot, muzzle1, muzzle2,
       ejector1, ejector2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


walk()
{
	if( TRUE )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <11.> now;
		turn lthigh to x-axis <-53.> now;
		turn torso to y-axis <6.> now;
		turn luparm to x-axis <39.> now;
		turn ruparm to x-axis <-18.> now;
		turn rloarm to x-axis <49.> now;
		turn lloarm to x-axis <49.> now;
		turn lleg to x-axis <53.> now;
		turn rleg to x-axis <53.> now;
		turn rfoot to x-axis <-38.> now;
		sleep 90;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-10.> now;
		turn lthigh to x-axis <-42.> now;
		turn torso to y-axis <3.> now;
		turn luparm to x-axis <32.> now;
		turn ruparm to x-axis <-11.> now;
		turn rloarm to x-axis <49.> now;
		turn lloarm to x-axis <49.> now;
		turn lleg to x-axis <42.> now;
		turn rleg to x-axis <82.> now;
		turn rfoot to x-axis <-31.> now;
		sleep 70;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-18.> now;
		turn lthigh to x-axis <-25.> now;
		turn torso to y-axis <0.> now;
		turn luparm to x-axis <27.> now;
		turn ruparm to x-axis <-7.> now;
		turn lleg to x-axis <25.> now;
		turn rleg to x-axis <86.> now;
		turn rfoot to x-axis <-23.> now;
		sleep 50;
	}
	if( TRUE )
	{
		move pelvis to y-axis [0.] now;
		turn rthigh to x-axis <-42.> now;
		turn lthigh to x-axis <5.> now;
		turn torso to y-axis <-3.> now;
		turn luparm to x-axis <8.> now;
		turn ruparm to x-axis <9.> now;
		turn rloarm to x-axis <49.> now;
		turn lloarm to x-axis <49.> now;
		turn lleg to x-axis <7.> now;
		turn lfoot to x-axis <-9.> now;
		turn rleg to x-axis <105.> now;
		turn rfoot to x-axis <0.> now;
		sleep 40;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-70.> now;
		turn lthigh to x-axis <15.> now;
		turn torso to y-axis <-6.> now;
		turn luparm to x-axis <-4.> now;
		turn ruparm to x-axis <18.> now;
		turn lleg to x-axis <15.> now;
		turn lfoot to x-axis <-25.> now;
		turn rleg to x-axis <107.> now;
		sleep 50;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-75.> now;
		turn lthigh to x-axis <20.> now;
		turn torso to y-axis <-8.> now;
		turn luparm to x-axis <-10.> now;
		turn ruparm to x-axis <25.> now;
		turn lleg to x-axis <26.> now;
		turn lfoot to x-axis <-34.> now;
		turn rleg to x-axis <65.> now;
		sleep 70;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <-57.> now;
		turn lthigh to x-axis <24.> now;
		turn torso to y-axis <-6.> now;
		turn luparm to x-axis <-24.> now;
		turn ruparm to x-axis <31.> now;
		turn rloarm to x-axis <49.> now;
		turn lloarm to x-axis <49.> now;
		turn lleg to x-axis <39.> now;
		turn lfoot to x-axis <-39.> now;
		turn rleg to x-axis <57.> now;
		sleep 90;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-45.> now;
		turn lthigh to x-axis <5.> now;
		turn torso to y-axis <-3.> now;
		turn luparm to x-axis <-16.> now;
		turn ruparm to x-axis <20.> now;
		turn lleg to x-axis <67.> now;
		turn rfoot to x-axis <-12.> now;
		sleep 70;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-23.> now;
		turn lthigh to x-axis <-13.> now;
		turn torso to y-axis <0.> now;
		turn luparm to x-axis <-2.> now;
		turn ruparm to x-axis <10.> now;
		turn lleg to x-axis <79.> now;
		turn lfoot to x-axis <-28.> now;
		turn rleg to x-axis <37.> now;
		turn rfoot to x-axis <-16.> now;
		sleep 50;
	}
	if( TRUE )
	{
		move pelvis to y-axis [0.] now;
		turn rthigh to x-axis <3.> now;
		turn lthigh to x-axis <-42.> now;
		turn torso to y-axis <3.> now;
		turn luparm to x-axis <12.> now;
		turn ruparm to x-axis <1.> now;
		turn rloarm to x-axis <49.> now;
		turn lloarm to x-axis <49.> now;
		turn lleg to x-axis <90.> now;
		turn lfoot to x-axis <-15.> now;
		turn rleg to x-axis <7.> now;
		turn rfoot to x-axis <-9.> now;
		sleep 40;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <13.> now;
		turn lthigh to x-axis <-57.> now;
		turn torso to y-axis <6.> now;
		turn luparm to x-axis <21.> now;
		turn ruparm to x-axis <-7.> now;
		turn rfoot to x-axis <-19.> now;
		sleep 50;
	}
	move pelvis to y-axis [-0.] now;
	turn rthigh to x-axis <16.> now;
	turn lthigh to x-axis <-67.> now;
	turn torso to y-axis <8.> now;
	turn luparm to x-axis <25.> now;
	turn ruparm to x-axis <-12.> now;
	turn lleg to x-axis <56.> now;
	turn lfoot to x-axis <-3.> now;
	turn rleg to x-axis <25.> now;
	turn rfoot to x-axis <-33.> now;
	sleep 70;
}

walklegs()
{
	if( TRUE )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <11.> now;
		turn lthigh to x-axis <-53.> now;
		turn lleg to x-axis <53.> now;
		turn rleg to x-axis <53.> now;
		turn rfoot to x-axis <-38.> now;
		sleep 90;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-10.> now;
		turn lthigh to x-axis <-42.> now;
		turn lleg to x-axis <42.> now;
		turn rleg to x-axis <82.> now;
		turn rfoot to x-axis <-31.> now;
		sleep 70;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-18.> now;
		turn lthigh to x-axis <-25.> now;
		turn lleg to x-axis <25.> now;
		turn rleg to x-axis <86.> now;
		turn rfoot to x-axis <-23.> now;
		sleep 50;
	}
	if( TRUE )
	{
		move pelvis to y-axis [0.] now;
		turn rthigh to x-axis <-42.> now;
		turn lthigh to x-axis <5.> now;
		turn lleg to x-axis <7.> now;
		turn lfoot to x-axis <-9.> now;
		turn rleg to x-axis <105.> now;
		turn rfoot to x-axis <0.> now;
		sleep 40;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-70.> now;
		turn lthigh to x-axis <15.> now;
		turn lleg to x-axis <15.> now;
		turn lfoot to x-axis <-25.> now;
		turn rleg to x-axis <107.> now;
		sleep 50;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-75.> now;
		turn lthigh to x-axis <20.> now;
		turn lleg to x-axis <26.> now;
		turn lfoot to x-axis <-34.> now;
		turn rleg to x-axis <65.> now;
		sleep 70;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <-57.> now;
		turn lthigh to x-axis <24.> now;
		turn lleg to x-axis <39.> now;
		turn lfoot to x-axis <-39.> now;
		turn rleg to x-axis <57.> now;
		sleep 90;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-45.> now;
		turn lthigh to x-axis <5.> now;
		turn lleg to x-axis <67.> now;
		turn rfoot to x-axis <-12.> now;
		sleep 70;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-23.> now;
		turn lthigh to x-axis <-13.> now;
		turn lleg to x-axis <79.> now;
		turn lfoot to x-axis <-28.> now;
		turn rleg to x-axis <37.> now;
		turn rfoot to x-axis <-16.> now;
		sleep 50;
	}
	if( TRUE )
	{
		move pelvis to y-axis [0.] now;
		turn rthigh to x-axis <3.> now;
		turn lthigh to x-axis <-42.> now;
		turn lleg to x-axis <90.> now;
		turn lfoot to x-axis <-15.> now;
		turn rleg to x-axis <7.> now;
		turn rfoot to x-axis <-9.> now;
		sleep 40;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <13.> now;
		turn lthigh to x-axis <-57.> now;
		turn rfoot to x-axis <-19.> now;
		sleep 50;
	}
	move pelvis to y-axis [-0.] now;
	turn rthigh to x-axis <16.> now;
	turn lthigh to x-axis <-67.> now;
	turn lleg to x-axis <56.> now;
	turn lfoot to x-axis <-3.> now;
	turn rleg to x-axis <25.> now;
	turn rfoot to x-axis <-33.> now;
	sleep 70;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = Static_Var_1;
		aiming = Static_Var_2;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_3 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
				move pelvis to y-axis [0.] speed [1.];
				turn rthigh to x-axis <0.> speed <200.>;
				turn rleg to x-axis <0.> speed <200.>;
				turn rfoot to x-axis <0.> speed <200.>;
				turn lthigh to x-axis <0.> speed <200.>;
				turn lleg to x-axis <0.> speed <200.>;
				turn lfoot to x-axis <0.> speed <200.>;
				if( !aiming )
				{
					turn torso to y-axis <0.> speed <90.>;
					turn rloarm to x-axis <90.> speed <200.>;
					turn ruparm to x-axis <0.> speed <200.>;
					turn lloarm to x-axis <90.> speed <200.>;
					turn luparm to x-axis <0.> speed <200.>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	hide muzzle1;
	hide muzzle2;
	hide ejector1;
	hide ejector2;
	hide rfire;
	hide lfire;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	Static_Var_5 = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_5 = Func_Var_1 * 2;
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

RestoreAfterDelay()
{
	sleep Static_Var_5;
	turn torso to y-axis <0.> speed <90.>;
	turn rloarm to x-axis <90.> speed <45.>;
	turn lloarm to x-axis <90.> speed <45.>;
	turn ruparm to x-axis <0.> speed <45.>;
	turn luparm to x-axis <0.> speed <45.>;
	wait-for-turn torso around y-axis;
	wait-for-turn rloarm around x-axis;
	wait-for-turn lloarm around x-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn luparm around x-axis;
	Static_Var_2 = 0;
}

AimFromPrimary(piecenum)
{
	if( Static_Var_4 == 0 )
	{
		piecenum = ruparm;
	}
	if( Static_Var_4 == 1 )
	{
		piecenum = luparm;
	}
}

QueryPrimary(piecenum)
{
	if( Static_Var_4 == 0 )
	{
		piecenum = rfire;
	}
	if( Static_Var_4 == 1 )
	{
		piecenum = lfire;
	}
}

FirePrimary()
{
	if( Static_Var_4 == 0 )
	{
		emit-sfx 1025 from rfire;
		emit-sfx 1024 from ejector2;
		sleep 33;
		emit-sfx 1025 from rfire;
		emit-sfx 1024 from ejector2;
		sleep 33;
		emit-sfx 1025 from rfire;
		emit-sfx 1024 from ejector2;
		Static_Var_4 = 1;
		return (0);
	}
	if( Static_Var_4 == 1 )
	{
		emit-sfx 1025 from lfire;
		emit-sfx 1024 from ejector1;
		sleep 33;
		emit-sfx 1025 from lfire;
		emit-sfx 1024 from ejector1;
		sleep 33;
		emit-sfx 1025 from lfire;
		emit-sfx 1024 from ejector1;
		Static_Var_4 = 0;
		return (0);
	}
}

AimPrimary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	Static_Var_2 = 1;
	while( !Static_Var_3 )
	{
		sleep 5;
	}
	turn torso to y-axis heading speed <350.>;
	turn lloarm to x-axis <0.> speed <300.>;
	turn rloarm to x-axis <0.> speed <300.>;
	turn luparm to x-axis <0.> - pitch speed <300.>;
	turn ruparm to x-axis <0.> - pitch speed <300.>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Killed(severity, corpsetype)
{
	hide rfire;
	hide lfire;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lfire type BITMAPONLY | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP3;
		explode lleg type BITMAPONLY | BITMAP4;
		explode lloarm type BITMAPONLY | BITMAP5;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode luparm type BITMAPONLY | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rfire type BITMAPONLY | BITMAP4;
		explode rfoot type BITMAPONLY | BITMAP5;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rloarm type BITMAPONLY | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP3;
		explode ruparm type BITMAPONLY | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lfire type FALL | BITMAP2;
		explode lfoot type FALL | BITMAP3;
		explode lleg type FALL | BITMAP4;
		explode lloarm type BITMAPONLY | BITMAP5;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode luparm type BITMAPONLY | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rfire type BITMAPONLY | BITMAP4;
		explode rfoot type BITMAPONLY | BITMAP5;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rloarm type BITMAPONLY | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP3;
		explode ruparm type BITMAPONLY | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lfire type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lthigh type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode luparm type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rfire type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rfoot type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rloarm type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ruparm type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode lfire type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lloarm type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode luparm type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rfire type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rfoot type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rloarm type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ruparm type BITMAPONLY | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type BITMAPONLY | EXPLODE_ON_HIT | BITMAP5;
}
