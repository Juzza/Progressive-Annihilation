piece base ,body ,engine1 ,engine2 ,turret ,flare1 ,flare2 ,flare3;
static-var restore_delay, gun_1, gun_2;
#define SMOKEPIECE1	body
#define SMOKEPIECE2	turret
#define SMOKEPIECE3	flare3
#define SIG_NUM1	2
#define SIG_AIM_2 4

#include "StateChg.h"

activatescr()
	{
	TURN engine1 to x-axis <45> SPEED <30>;	
	TURN engine2 to x-axis <45> SPEED <30>;	
	}
deactivatescr()
	{
	TURN engine1 to x-axis <0> SPEED <60>;	
	TURN engine2 to x-axis <0> SPEED <60>;	
	}
#include "smokeunit.h"
#include "exptype.h"
#define ACTIVATECMD CALL-SCRIPT activatescr();
#define DEACTIVATECMD CALL-SCRIPT deactivatescr();
#include "StateChg.h"

RestoreAfterDelay()
	{
    	SLEEP restore_delay;
    	TURN turret to y-axis <0> SPEED <50>;
	}

SetMaxReloadTime(time)
	{
	restore_delay = time * 2;
	}
Create()
	{
		Hide flare1;
		Hide flare2;
		Hide flare3;
		gun_1 = 0;
		restore_delay = 3000;
		CALL-SCRIPT InitState();
		START-SCRIPT SmokeUnit();
	}
Activate()
	{
		START-SCRIPT RequestState( ACTIVE );
	}
Deactivate()
	{
		START-SCRIPT RequestState( INACTIVE );
	}
AimPrimary(heading,pitch)
	{
	SIGNAL SIG_NUM1;
    	SET-SIGNAL-MASK SIG_NUM1;
    	TURN turret to y-axis heading SPEED <80>;
    	WAIT-FOR-TURN turret around y-axis;
    	START-SCRIPT RestoreAfterDelay();
    	RETURN ( TRUE );
   	}

FirePrimary()
  	{
	SHOW flare3;
	SLEEP <150>;
	HIDE flare3;
   	}

QueryPrimary(piecenum)
  	{
	piecenum=flare3;
   	}

AimFromPrimary(piecenum)
  	{ 
	piecenum=turret;
   	}

AimSecondary()
{
	while( gun_1 >= 3)
        {
        sleep 100;
        }
        signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	return (1);
}

FireSecondary(piecenum)
{
	if( gun_1 == 0 )
	{
		show flare2;
		sleep 100;
		hide flare2;
	}
	if( gun_1 == 1 )
	{
		show flare1;
		sleep 100;
		hide flare1;
	}
        gun_1= gun_1 + 1;
	if( gun_1 >= 2 )
	{
	gun_1=0;	
    }
}

AimFromSecondary(piecenum)
{
	piecenum = body;
}

QuerySecondary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
        if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}
QueryTertiary(piecenum)
 	{ 
	piecenum=flare2;

	}

SweetSpot(piecenum)
	{
	piecenum = body;
	}

Killed(severity, corpsetype)
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode body 	type	BITMAPONLY | BITMAP1;
		explode turret type	BITMAPONLY | BITMAP2;
		explode engine1	type	BITMAPONLY | BITMAP3;
		explode engine2 	type	BITMAPONLY | BITMAP5;
		return(0);
		}
	if (severity <= 50)
		{
		corpsetype = 2;
		explode body type	SHATTER | BITMAP4;
		explode turret type	SHATTER | BITMAP1;
		explode engine1 type	SHATTER | BITMAP4;
		explode engine2 type	SHATTER | BITMAP5;
		return(0);
		}
	if (severity <= 99)
		{
		corpsetype = 3;
		explode body type	SHATTER | BITMAP4;
		explode turret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode engine1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode engine2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return(0);
		}
	corpsetype = 3;
	explode body type	SHATTER | BITMAP4;
	explode engine1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode engine2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return(0);
	}