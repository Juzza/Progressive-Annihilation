#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, barrel, flare1, flare2, flare3;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;

#define SIG_AIM	2
#define SIG_LOCK 4

LockTurret(heading)
{
	set-signal-mask SIG_LOCK;
	
	while(1)
	{
		turn turret to y-axis (heading - get HEADING) speed (get 1030);
		sleep 20;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Create()
{
	Static_Var_1 = 2000;
	Static_Var_3 = 0;
	hide flare1;
	hide flare2;
	hide flare3;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 5000;
	signal SIG_LOCK;
	turn turret to y-axis <0.> speed <160.>;
	turn barrel to x-axis <0.> speed <160.>;
}

AimFromPrimary(piecenum)
{
	piecenum = barrel;
}

AimPrimary(heading, pitch)
{
	signal SIG_LOCK;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	var absHeading;
	absHeading = heading + get HEADING;
	
	turn turret to y-axis heading speed <80.>;
	turn barrel to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
	
	start-script LockTurret(absHeading);
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_3 == 0 )
	{
		emit-sfx 1024 from flare1;
		sleep 300;
		emit-sfx 1024 from flare2;
		sleep 300;
		emit-sfx 1024 from flare3;
		Static_Var_3 = 1;
		return (0);
	}
	if( Static_Var_3 == 1 )
	{
		emit-sfx 1024 from flare1;
		sleep 300;
		emit-sfx 1024 from flare2;
		sleep 300;
		emit-sfx 1024 from flare3;
		Static_Var_3 = 2;
		return (0);
	}
	if( Static_Var_3 == 2 )
	{
		show flare3;
		sleep 100;
		emit-sfx 1024 from flare1;
		sleep 300;
		emit-sfx 1024 from flare2;
		sleep 300;
		emit-sfx 1024 from flare3;
		Static_Var_3 = 0;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if( Static_Var_3 == 0 )
	{
		piecenum = flare1;
	}
	if( Static_Var_3 == 1 )
	{
		piecenum = flare2;
	}
	if( Static_Var_3 == 2 )
	{
		piecenum = flare3;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP1;
		explode flare3 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode body type SHATTER | BITMAP4;
		explode turret type SHATTER | BITMAP4;
		explode barrel type SHATTER | BITMAP4;
		explode flare1 type SHATTER | BITMAP4;
		explode flare2 type SHATTER | BITMAP4;
		explode flare3 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
