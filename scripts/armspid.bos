#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, box, flare1, flare2, flare3, leg1, leg2,
       leg3, leg4, leg5, leg6;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, gun_1;


walk2()
{
	while( Static_Var_1 )
	{
		if( Static_Var_1 )
		{
			turn leg1 to y-axis <44.> now;
			turn leg1 to y-axis <0.> speed <219.>;
			turn leg1 to z-axis <1.> now;
			turn leg1 to z-axis <0.> speed <3.>;
			turn leg2 to z-axis <0.> now;
			turn leg2 to z-axis <31.> speed <155.>;
			turn leg3 to y-axis <35.> now;
			turn leg3 to y-axis <34.> speed <3.>;
			turn leg3 to z-axis <32.> now;
			turn leg3 to z-axis <1.> speed <155.>;
			turn leg4 to y-axis <-40.> now;
			turn leg4 to y-axis <-40.> speed <0.>;
			turn leg4 to z-axis <-31.> now;
			turn leg4 to z-axis <-1.> speed <152.>;
			turn leg5 to y-axis <-37.> now;
			turn leg5 to y-axis <0.> speed <186.>;
			turn leg5 to z-axis <0.> now;
			turn leg5 to z-axis <0.> speed <0.>;
			turn leg6 to y-axis <0.> now;
			turn leg6 to y-axis <-30.> speed <152.>;
			turn leg6 to z-axis <-45.> now;
			sleep 200;
		}
		if( Static_Var_1 )
		{
			turn leg1 to z-axis <32.> speed <158.>;
			turn leg2 to y-axis <35.> speed <173.>;
			turn leg2 to z-axis <31.> speed <0.>;
			turn leg3 to y-axis <0.> speed <170.>;
			turn leg3 to z-axis <0.> speed <3.>;
			turn leg4 to y-axis <0.> speed <201.>;
			turn leg5 to z-axis <-31.> speed <155.>;
			turn leg6 to z-axis <2.> speed <237.>;
			sleep 200;
		}
		if( Static_Var_1 )
		{
			turn leg1 to y-axis <56.> speed <280.>;
			turn leg1 to z-axis <31.> speed <3.>;
			turn leg2 to y-axis <35.> speed <0.>;
			turn leg2 to z-axis <1.> speed <152.>;
			turn leg3 to z-axis <32.> speed <158.>;
			turn leg4 to y-axis <-1.> speed <3.>;
			turn leg4 to z-axis <-31.> speed <152.>;
			turn leg5 to y-axis <-32.> speed <158.>;
			turn leg5 to z-axis <-31.> speed <0.>;
			turn leg6 to y-axis <3.> speed <167.>;
			sleep 200;
		}
		turn leg1 to y-axis <44.> speed <61.>;
		turn leg1 to z-axis <1.> speed <152.>;
		turn leg2 to y-axis <0.> speed <173.>;
		turn leg2 to z-axis <0.> speed <3.>;
		turn leg3 to y-axis <35.> speed <173.>;
		turn leg3 to z-axis <32.> speed <0.>;
		turn leg4 to y-axis <-40.> speed <198.>;
		turn leg4 to z-axis <-31.> speed <0.>;
		turn leg5 to y-axis <-37.> speed <27.>;
		turn leg5 to z-axis <0.> speed <155.>;
		turn leg6 to y-axis <0.> speed <15.>;
		turn leg6 to z-axis <-45.> speed <237.>;
		sleep 200;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = Static_Var_1;
		if( Func_Var_1 )
		{
			call-script walk2();
		}
		if( !Func_Var_1 )
		{
			sleep 300;
			turn leg1 to y-axis <0.> speed <60.>;
			turn leg1 to z-axis <0.> speed <60.>;
			
			turn leg2 to z-axis <0.> speed <60.>;
			turn leg2 to z-axis <0.> speed <60.>;
			
			turn leg3 to y-axis <0.> speed <60.>;
			turn leg3 to z-axis <0.> speed <60.>;
			
			turn leg4 to y-axis <0.> speed <60.>;
			turn leg4 to z-axis <0.> speed <60.>;
			
			turn leg5 to y-axis <0.> speed <60.>;
			turn leg5 to z-axis <0.> speed <60.>;
			
			turn leg6 to y-axis <0.> speed <60.>;
			turn leg6 to z-axis <0.> speed <60.>;
		}
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	Static_Var_1 = 0;
	Static_Var_3 = 0;
	Static_Var_2 = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	turn box to y-axis <0.000000> speed <150.000000>;
	turn box to x-axis <0.000000> speed <150.000000>;
	wait-for-turn box around y-axis;
	wait-for-turn box around x-axis;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn box to y-axis heading speed <150.000000>;
	turn box to x-axis pitch speed <150.000000>;
	wait-for-turn box around y-axis;
	wait-for-turn box around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		gun_1 = 1;
		return (1);
	}
	if( gun_1 == 1 )
	{
		gun_1 = 2;
		return (1);
	}
	if( gun_1 == 2 )
	{
		gun_1 = 0;
		return (1);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = box;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare3;
	}
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode leg1 type BITMAPONLY | BITMAP1;
		explode leg2 type BITMAPONLY | BITMAP2;
		explode leg3 type BITMAPONLY | BITMAP3;
		explode leg4 type BITMAPONLY | BITMAP4;
		explode leg5 type BITMAPONLY | BITMAP5;
		explode leg6 type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode box type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		explode leg1 type FALL | BITMAP1;
		explode leg2 type FALL | BITMAP2;
		explode leg3 type FALL | BITMAP3;
		explode leg4 type FALL | BITMAP4;
		explode leg5 type FALL | BITMAP5;
		explode leg6 type FALL | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode box type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP3;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode box type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP3;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode box type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
