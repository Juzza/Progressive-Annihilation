#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_AIM 2

piece  base, body, turret, basel, ground, turretl, canon,
    barrelA, barrelB, barrelC, barrelD, flare, flare2, 
    flare3, flare4, baser, groundr, turretr, canonr, barrelAr, 
    barrelBr, barrelCr, barrelDr, flarer, flare2r, flare3r, flare4r,
    firepoint1r, firepoint2r, firepoint3r, firepoint4r,
    firepoint1, firepoint2, firepoint3, firepoint4,
    ejectorr, ejectorl;
    

static-var  activeBarrel;

FIdle()
{
    spin turret around y-axis speed <25.0>;
	turn ground to x-axis <0.0> - <45.0> speed <45.0>;
	turn groundr to x-axis <0.0> - <45.0> speed <45.0>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide ejectorl;
	hide ejectorr;
	hide firepoint1r;
	hide firepoint2r;
	hide firepoint3r;
	hide firepoint4r;
	hide firepoint1;
	hide firepoint2;
	hide firepoint3;
	hide firepoint4;
	hide flare;
	hide flarer;
	hide basel;
	hide baser;
	
	dont-shade base;
	dont-shade body;
	dont-shade turret;
    
    activeBarrel = 0;
    
	while (get BUILD_PERCENT_LEFT)
	{
		sleep 1000;
	}
    
	start-script SmokeUnit();
    call-script FIdle();
}

RestoreAfterDelay()
{
	sleep 5000;
    call-script FIdle();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if (activeBarrel == 0)         piecenum = flare;
	else if (activeBarrel == 1)    piecenum = flarer;
	else if (activeBarrel == 2)    piecenum = flare2;
	else if (activeBarrel == 3)    piecenum = flare2r;
	else if (activeBarrel == 4)    piecenum = flare3;
	else if (activeBarrel == 5)    piecenum = flare3r;
	else if (activeBarrel == 6)    piecenum = flare4;
	else if (activeBarrel == 7)    piecenum = flare4r;
}

AimFromPrimary(piecenum)
{
    piecenum = ground;
}

AimPrimary(heading, pitch)
{
    // Signals
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
    
    // Turn to target
    stop-spin turret around y-axis;
	turn turret to y-axis heading speed <360.0>;
	turn ground to x-axis <0.0> - pitch speed <180.0>;
	turn groundr to x-axis <0.0> - pitch speed <180.0>;
    
    // Wait
	wait-for-turn turret around y-axis;
    wait-for-turn ground around x-axis;
    
    // Done
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
    // Nothing !
}

Shot1()
{
    if (activeBarrel == 0)
    {
        emit-sfx 1025 from ejectorl;
        emit-sfx 1024 from firepoint1;
		move barrelA to z-axis [-2.0] now;
		move barrelA to z-axis [0.0] speed [8.0];
        activeBarrel = 1;
    }
	else if (activeBarrel == 1)
    {
        emit-sfx 1025 from ejectorr;
        emit-sfx 1024 from firepoint1r;
		move barrelAr to z-axis [-2.0] now;
		move barrelAr to z-axis [0.0] speed [8.0];
        activeBarrel = 2;
    }
	else if (activeBarrel == 2)
    {
 	    emit-sfx 1025 from ejectorl;
        emit-sfx 1024 from firepoint2;
		move barrelB to z-axis [-2.0] now;
		move barrelB to z-axis [0.0] speed [8.0];
        activeBarrel = 3;
    }
	else if (activeBarrel == 3)
    {
        emit-sfx 1024 from firepoint2r;
        emit-sfx 1025 from ejectorr;
		move barrelBr to z-axis [-2.0] now;
		move barrelBr to z-axis [0.0] speed [8.0];
        activeBarrel = 4;
    }
	else if (activeBarrel == 4)
    {
        emit-sfx 1024 from firepoint3;
        emit-sfx 1025 from ejectorl;
		move barrelC to z-axis [-2.] now;
		move barrelC to z-axis [0.] speed [8.];
        activeBarrel = 5;
    }
	else if (activeBarrel == 5)
    {
        emit-sfx 1024 from firepoint3r;
        emit-sfx 1025 from ejectorr;
		move barrelCr to z-axis [-2.] now;
		move barrelCr to z-axis [0.] speed [8.];
        activeBarrel = 6;
    }
	else if (activeBarrel == 6)
    {
        emit-sfx 1024 from firepoint4;
        emit-sfx 1025 from ejectorl;
		move barrelD to z-axis [-2.] now;
		move barrelD to z-axis [0.] speed [8.];
        activeBarrel = 7;
    }
	else if (activeBarrel == 7)
    {
        emit-sfx 1024 from firepoint4r;
        emit-sfx 1025 from ejectorr;
		move barrelDr to z-axis [-2.0] now;
		move barrelDr to z-axis [0.0] speed [8.0];
        activeBarrel = 0;
    }
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode groundr type BITMAPONLY | BITMAP1;
		explode ground type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode body type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP4;
		explode groundr type SHATTER | BITMAP4;
		explode ground type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type BITMAPONLY | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode groundr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type BITMAPONLY | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode groundr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}

