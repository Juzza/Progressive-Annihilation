#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  	spoint1, spoint2, flare2, flare, arms, GP, turret, lmissile, rmissile, torso, ruparm, luparm, pelvis, lthigh, rthigh, rleg, rfoot, lleg, lfoot, lloarm, lhand, rloarm, rhand, mpoint1, mpoint2, lbarrel, rbarrel;

static-var  restore_delay, bFire, smokeloop, bShotPause, gun_1;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4

walk()
{
	while( TRUE )
	{
		if( TRUE )
		{
			move torso to y-axis [0.000000] now;
			move ruparm to y-axis [0.000000] now;
			move ruparm to z-axis [0.000000] now;
			move luparm to y-axis [-0.300000] now;
			move luparm to z-axis [0.300000] now;
			turn pelvis to z-axis <-3.598901> now;
			turn torso to z-axis <5.401099> now;
			turn lthigh to x-axis <33.758242> now;
			turn rthigh to x-axis <0.000000> now;
			turn rleg to x-axis <42.758242> now;
			turn rfoot to x-axis <-31.956044> now;
			turn lleg to x-axis <7.197802> now;
			turn lfoot to x-axis <-11.697802> now;
			turn ruparm to x-axis <22.950549> now;
			turn luparm to x-axis <-51.307692> now;
			turn lloarm to x-axis <21.153846> now;
			turn lhand to x-axis <36.456044> now;
			turn rloarm to x-axis <0.000000> now;
			turn rhand to x-axis <-5.846154> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.150000] now;
			move ruparm to y-axis [0.600000] now;
			move ruparm to z-axis [-0.350000] now;
			move luparm to y-axis [0.000000] now;
			move luparm to z-axis [0.200000] now;
			turn pelvis to z-axis <-2.247253> now;
			turn torso to z-axis <2.247253> now;
			turn lthigh to x-axis <47.258242> now;
			turn rthigh to x-axis <6.747253> now;
			turn rleg to x-axis <-28.802198> now;
			turn rfoot to x-axis <16.653846> now;
			turn lleg to x-axis <-5.846154> now;
			turn lfoot to x-axis <0.000000> now;
			turn ruparm to x-axis <7.197802> now;
			turn luparm to x-axis <-29.252747> now;
			turn lloarm to x-axis <13.500000> now;
			turn lhand to x-axis <16.203297> now;
			turn rloarm to x-axis <3.598901> now;
			turn rhand to x-axis <106.225275> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.350000] now;
			move ruparm to z-axis [-0.100000] now;
			move luparm to z-axis [0.000000] now;
			turn pelvis to z-axis <-0.895604> now;
			turn torso to z-axis <-1.346154> now;
			turn lthigh to x-axis <51.307692> now;
			turn rthigh to x-axis <9.450549> now;
			turn rleg to x-axis <10.802198> now;
			turn rfoot to x-axis <-10.351648> now;
			turn lleg to x-axis <0.000000> now;
			turn lfoot to x-axis <21.153846> now;
			turn luparm to x-axis <0.000000> now;
			turn lloarm to x-axis <0.000000> now;
			turn lhand to x-axis <0.000000> now;
			turn rloarm to x-axis <-40.956044> now;
			turn rhand to x-axis <143.131868> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.200000] now;
			move ruparm to z-axis [0.100000] now;
			turn pelvis to z-axis <2.247253> now;
			turn torso to z-axis <-4.950549> now;
			turn lthigh to x-axis <0.895604> now;
			turn rthigh to x-axis <20.703297> now;
			turn rleg to x-axis <3.598901> now;
			turn rfoot to x-axis <-14.851648> now;
			turn lleg to x-axis <55.813187> now;
			turn lfoot to x-axis <0.895604> now;
			turn ruparm to x-axis <-18.000000> now;
			turn luparm to x-axis <18.000000> now;
			turn lloarm to x-axis <-3.148352> now;
			turn lhand to x-axis <-5.401099> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.000000] now;
			move ruparm to y-axis [-0.150000] now;
			move ruparm to z-axis [0.200000] now;
			turn pelvis to z-axis <3.598901> now;
			turn torso to z-axis <-4.500000> now;
			turn lthigh to x-axis <-16.203297> now;
			turn rthigh to x-axis <35.554945> now;
			turn rfoot to x-axis <-9.000000> now;
			turn lleg to x-axis <54.912088> now;
			turn lfoot to x-axis <-21.604396> now;
			turn ruparm to x-axis <-48.609890> now;
			turn luparm to x-axis <20.252747> now;
			turn lloarm to x-axis <9.000000> now;
			turn lhand to x-axis <-17.098901> now;
			turn rloarm to x-axis <14.401099> now;
			turn rhand to x-axis <46.357143> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.150000] now;
			move ruparm to z-axis [0.200000] now;
			move luparm to y-axis [0.600000] now;
			turn pelvis to z-axis <2.247253> now;
			turn torso to z-axis <-2.247253> now;
			turn lthigh to x-axis <0.000000> now;
			turn rthigh to x-axis <46.357143> now;
			turn rfoot to x-axis <5.846154> now;
			turn lleg to x-axis <0.000000> now;
			turn lfoot to x-axis <0.000000> now;
			turn ruparm to x-axis <-33.758242> now;
			turn luparm to x-axis <11.252747> now;
			turn lloarm to x-axis <0.000000> now;
			turn lhand to x-axis <116.576923> now;
			turn rhand to x-axis <20.252747> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.350000] now;
			move ruparm to z-axis [0.100000] now;
			move luparm to y-axis [0.600000] now;
			turn pelvis to z-axis <0.895604> now;
			turn torso to z-axis <1.346154> now;
			turn lthigh to x-axis <11.252747> now;
			turn rthigh to x-axis <60.313187> now;
			turn rfoot to x-axis <10.802198> now;
			turn lleg to x-axis <13.049451> now;
			turn lfoot to x-axis <-14.851648> now;
			turn ruparm to x-axis <5.401099> now;
			turn luparm to x-axis <-9.000000> now;
			turn lloarm to x-axis <-28.802198> now;
			turn lhand to x-axis <148.983516> now;
			turn rloarm to x-axis <-5.846154> now;
			turn rhand to x-axis <6.747253> now;
			sleep 130;
		}
		move torso to y-axis [0.200000] now;
		move ruparm to z-axis [0.000000] now;
		move luparm to y-axis [0.000000] now;
		turn pelvis to z-axis <-1.796703> now;
		turn torso to z-axis <5.401099> now;
		turn lthigh to x-axis <36.906593> now;
		turn rthigh to x-axis <27.005495> now;
		turn rleg to x-axis <39.159341> now;
		turn lleg to x-axis <-0.445055> now;
		turn lfoot to x-axis <-17.098901> now;
		turn luparm to x-axis <-21.153846> now;
		turn lloarm to x-axis <-40.505495> now;
		turn lhand to x-axis <90.021978> now;
		turn rloarm to x-axis <4.049451> now;
		turn rhand to x-axis <-9.901099> now;
		sleep 130;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	hide flare2;
	hide flare;
	hide mpoint1;
	hide mpoint2;
	dont-shade mpoint1;
	dont-shade mpoint2;
	
	bFire = 0;
	smokeloop = 0;
	bShotPause = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	move torso to y-axis [0] now;
	move ruparm to y-axis [0] now;
	move ruparm to z-axis [0] now;
	move luparm to y-axis [0] now;
	move luparm to z-axis [0] now;
	turn pelvis to z-axis <0> now;
	turn torso to z-axis <0> now;
	turn lthigh to x-axis <0> now;
	turn rthigh to x-axis <0> now;
	turn rleg to x-axis <0> now;
	turn rfoot to x-axis <0> now;
	turn lleg to x-axis <0> now;
	turn lfoot to x-axis <0> now;
	turn ruparm to x-axis <0> now;
	turn luparm to x-axis <0> now;
	turn lloarm to x-axis <0> now;
	turn lhand to x-axis <0> now;
	turn rloarm to x-axis <0> now;
	turn rhand to x-axis <0> now;
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = GP;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	
	bFire = 0;
	smokeloop = 0;
	turn turret to y-axis <0> speed <80>;	
	turn arms to x-axis <0> speed <80>;
	wait-for-turn turret around y-axis;
}

AimPrimary(heading, pitch)
{

	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <150>;	
	turn arms to x-axis <0.000000> - pitch speed <50>;
	wait-for-turn turret around y-axis;
	wait-for-turn arms around x-axis;
	
	if (bShotPause == 1) //Pausing between Quad shots
	{
		sleep(4000);
		bShotPause = 0;
	}
	start-script RestoreAfterDelay();
	return (TRUE);
}

SmokeMe(Toggle)
{
	if(Toggle == 0)
	{
		while(smokeloop < 7) //6 Smoke puffs per shot
		{
			emit-sfx SFXTYPE_WHITESMOKE from spoint1;
			sleep(100);
			smokeloop = smokeloop + 1;
		}
	}
	if(Toggle == 1)
	{
		while(smokeloop < 7) //6 Smoke puffs per shot
		{
			emit-sfx SFXTYPE_WHITESMOKE from spoint2;
			sleep(100);
			smokeloop = smokeloop + 1;
		}	
	}
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 from flare;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 from flare2;
	}
        gun_1= gun_1 + 1;
	if( gun_1 >= 2 )
	{
	gun_1=0;	
    }
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = mpoint1;
	}
        if( gun_1 == 1 )
	{
		piecenum = mpoint2;
	}
}

AimFromPrimary(piecenum)
{

	piecenum = turret;
	
}

Killed(severity, corpsetype)
{
	hide mpoint1;
	hide mpoint2;
	
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode lhand type BITMAPONLY | BITMAP5;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lloarm type BITMAPONLY | BITMAP2;
		explode lthigh type BITMAPONLY | BITMAP3;
		explode luparm type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rhand type BITMAPONLY | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP3;
		explode rloarm type BITMAPONLY | BITMAP4;
		explode rthigh type BITMAPONLY | BITMAP5;
		explode ruparm type BITMAPONLY | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lfoot type FALL | BITMAP4;
		explode lhand type FALL | BITMAP5;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type FALL | BITMAP2;
		explode lthigh type FALL | BITMAP3;
		explode luparm type FALL | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type FALL | BITMAP1;
		explode rhand type FALL | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type FALL | BITMAP4;
		explode rthigh type FALL | BITMAP5;
		explode ruparm type FALL | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode pelvis type BITMAPONLY | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode torso type BITMAPONLY | BITMAP2;
	explode turret type BITMAPONLY | BITMAP3;
}
