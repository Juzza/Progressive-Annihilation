#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, body, head, sleeveholder, sleeve, barrel, flare,
       rhip, rthigh, rleg, rfoot, lhip, lthigh, lleg, lfoot;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from sleeve;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from rleg;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Walk()
{
	while( Static_Var_1 )
	{
		if( Static_Var_2 )
		{
			turn lhip to x-axis <-5.> speed <8.>;
			turn lthigh to x-axis <-10.> speed <12.>;
			turn rhip to x-axis <50.> speed <80.>;
			turn rfoot to x-axis <-50.> speed <80.>;
		}
		if( !Static_Var_2 )
		{
			if( !Static_Var_5 )
			{
				move head to z-axis [1.] speed [1.];
				move head to y-axis [-1.] speed [1.];
				turn sleeveholder to x-axis <-17.> speed <34.>;
			}
			turn rhip to x-axis <50.> speed <88.>;
			turn rthigh to x-axis <0.> speed <16.>;
			turn rfoot to x-axis <-50.> speed <28.>;
			turn lhip to x-axis <-5.> speed <108.>;
			turn lleg to x-axis <-20.> speed <16.>;
			turn lfoot to x-axis <0.> speed <80.>;
		}
		sleep 625;
		turn lfoot to x-axis <15.> speed <48.>;
		turn rhip to x-axis <80.> speed <96.>;
		turn rleg to x-axis <-30.> speed <96.>;
		if( !Static_Var_5 )
		{
			move head to y-axis [0.] speed [1.];
		}
		sleep 312;
		if( !Static_Var_5 )
		{
			move head to z-axis [0.] speed [1.];
			move head to y-axis [-1.] speed [1.];
			turn sleeveholder to x-axis <17.> speed <34.>;
		}
		turn lhip to x-axis <50.> speed <88.>;
		turn lthigh to x-axis <0.> speed <16.>;
		turn lfoot to x-axis <-50.> speed <104.>;
		turn rhip to x-axis <-5.> speed <108.>;
		turn rleg to x-axis <-20.> speed <16.>;
		turn rfoot to x-axis <0.> speed <80.>;
		sleep 625;
		if( !Static_Var_5 )
		{
			move head to y-axis [0.] speed [1.];
		}
		turn rfoot to x-axis <15.> speed <48.>;
		turn lhip to x-axis <80.> speed <96.>;
		turn lleg to x-axis <-30.> speed <96.>;
		sleep 312;
		if( Static_Var_2 )
		{
			Static_Var_2 = 0;
		}
	}
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	Static_Var_2 = 1;
	Static_Var_1 = 1;
	start-script Walk();
}

StopMoving()
{
	signal 8;
	set-signal-mask 8;
	Static_Var_1 = 0;
	turn rhip to x-axis <0.> speed <80.>;
	turn rthigh to x-axis <0.> speed <110.>;
	turn rleg to x-axis <0.> speed <90.>;
	turn rfoot to x-axis <0.> speed <110.>;
	turn lhip to x-axis <0.> speed <80.>;
	turn lthigh to x-axis <0.> speed <100.>;
	turn lleg to x-axis <0.> speed <90.>;
	turn lfoot to x-axis <0.> speed <110.>;
	move head to y-axis [0.] speed [1.];
	move head to x-axis [0.] speed [1.];
	move head to z-axis [0.] speed [1.];
	if( !Static_Var_3 )
	{
		turn head to y-axis <0.> speed <70.>;
		turn sleeve to x-axis <0.> speed <50.>;
	}
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 1;
	Static_Var_3 = 0;
	Static_Var_5 = 0;
	Static_Var_4 = Rand( 1, 2 );
	if( Static_Var_4 == 1 )
	{
		turn sleeve to z-axis <180.> now;
	}
	hide flare;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 3000;
	turn head to y-axis <0.> speed <100.>;
	turn sleeveholder to x-axis <0.> speed <50.>;
	Static_Var_5 = 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	Static_Var_5 = 1;
	turn head to y-axis heading speed <160.>;
	turn sleeveholder to x-axis <0.> - pitch speed <95.>;
	wait-for-turn head around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	move barrel to z-axis [-2.] speed [200.];
	sleep 150;
	move barrel to z-axis [0.] speed [2.];
	hide flare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode head type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP1;
		explode rhip type BITMAPONLY | BITMAP1;
		explode rthigh type BITMAPONLY | BITMAP1;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode lhip type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lfoot type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode pelvis type SHATTER | BITMAP4;
		explode body type SHATTER | BITMAP4;
		explode head type SHATTER | BITMAP4;
		explode sleeve type SHATTER | BITMAP4;
		explode barrel type SHATTER | BITMAP4;
		explode flare type SHATTER | BITMAP4;
		explode rhip type SHATTER | BITMAP4;
		explode rthigh type SHATTER | BITMAP4;
		explode rleg type SHATTER | BITMAP4;
		explode rfoot type SHATTER | BITMAP4;
		explode lhip type SHATTER | BITMAP4;
		explode lthigh type SHATTER | BITMAP4;
		explode lleg type SHATTER | BITMAP4;
		explode lfoot type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rhip type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lhip type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rhip type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lhip type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
