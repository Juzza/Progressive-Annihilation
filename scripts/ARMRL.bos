#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, barrel, launcher, muzzle, exhaust;

static-var  Static_Var_1, Static_Var_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	dont-cache barrel;
	dont-cache launcher;
	dont-cache turret;
	dont-cache flare;
	dont-shade barrel;
	dont-shade launcher;
	dont-shade turret;
	dont-shade flare;
	Static_Var_1 = 1;
	Static_Var_2 = 1;
	start-script SmokeUnit();
	hide muzzle;
	hide exhaust;
}

Reload()
{
	if( Static_Var_1 >= 0 )
	{
		sleep 10;
		--Static_Var_1;
	}
}

AimPrimary(heading, pitch)
{
	if( Static_Var_1 <= 3 )
	{
		signal 2;
		set-signal-mask 2;
		turn turret to y-axis heading speed <450.>;
		turn launcher to x-axis <0.> - pitch speed <450.>;
		wait-for-turn turret around y-axis;
		wait-for-turn launcher around x-axis;
		return (1);
	}
	if( Static_Var_1 >= 4 )
	{
		sleep 15;
	}
}

FirePrimary()
{
	++Static_Var_1;
	++Static_Var_2;
	if( Static_Var_2 == 1 )
	{
		turn barrel to z-axis <0.> speed <300.>;
	}
	if( Static_Var_2 == 2 )
	{
		turn barrel to z-axis <120.> speed <300.>;
	}
	if( Static_Var_2 == 3 )
	{
		turn barrel to z-axis <-120.> speed <300.>;
		Static_Var_2 = 0;
	}
	emit-sfx 1024 from muzzle;
	emit-sfx 1025 from exhaust;
	start-script Reload();
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type BITMAPONLY | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
