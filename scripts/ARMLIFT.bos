#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, wing1, wing2, wing3, wing4, thruster1, thruster2, thruster3, thruster4, jet1, jet2, jet3, jet4,
       backthrust;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, on, moving, gun_1, loaded ;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

ProcessFlames()
{
	var prevxz, xz, prevy, y;
	xz = get PIECE_XZ(base);
	y = get PIECE_Y(base);
	prevxz = 0;
	prevy = 0;
	while( 1 )
	{
		xz = get PIECE_XZ(base);
		y = get PIECE_Y(base);
		if( y > get GROUND_HEIGHT(xz) + [5])
		{
			emit-sfx 0 from jet1;
			emit-sfx 0 from jet2;
			emit-sfx 0 from jet3;
			emit-sfx 0 from jet4;
		}
		if(prevxz == xz && prevy == y)
		{
		//	set ACTIVATION to FALSE;
		}
		sleep 33;
		prevxz = xz;
		prevy = y;
	}
}


RestoreAfterDelay()
{
	sleep 3000;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
//			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
//			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	loaded=0;
	
	on=0;
	moving=0;
	Static_Var_1 = 0;
	gun_1 = 0;
	
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
	start-script ProcessFlames();
}

QueryTransport(piecenum)
{
	piecenum = link;
}

Activate()
{
	set ARMORED to 1;
	on=1;
//	var unit_ID;
	move wing1 to x-axis [3.000000] speed [25.000000];
	move wing2 to x-axis [-3.000000] speed [25.000000];
	move wing3 to x-axis [3.000000] speed [25.000000];
	move wing4 to x-axis [-3.000000] speed [25.000000];
//	sleep 500;
}

Deactivate()
{
	on=0;
	move wing1 to x-axis [0.000000] speed [25.000000];
	move wing2 to x-axis [0.000000] speed [25.000000];
	move wing3 to x-axis [0.000000] speed [25.000000];
	move wing4 to x-axis [0.000000] speed [25.000000];
	set ARMORED to 0;
}


BeginTransport()
{
	loaded=1;
	start-script RequestState(0);
}

EndTransport()
{
	start-script RequestState(1);
}

StartMoving()
{
	loaded=0;
	signal 2;
	moving=1;
	set-signal-mask SIG_MOVE;
}


StopMoving()
{
	Static_Var_1 = 0;
	moving=0;
	signal 2;
}

MoveRate1()
{
	signal 2;
	set-signal-mask 2;
//	start-script ProcessFlames();
//	Static_Var_1 = 1;
}

MoveRate2()
{
	signal 2;
	set-signal-mask 2;
//	start-script ProcessFlames();
//	Static_Var_1 = 2;
}

MoveRate3()
{
	signal 2;
	set-signal-mask 2;
//	start-script ProcessFlames();
//	Static_Var_1 = 3;
}

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	//if (get 75(get 71))
	//{
	//	var count, min, max;
	//	min = get 69;
	//	max = get 70;
	//	for ( count = min; count < max; ++count )
	//	{
	//		drop-unit count;
	//	}
	//}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode thruster1 type FALL | FIRE | SMOKE | BITMAP1;
		explode thruster2 type FALL | FIRE | SMOKE | BITMAP2;
		explode thruster3 type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode jet1 type FALL | FIRE | SMOKE | BITMAP5;
		explode jet2 type FALL | FIRE | SMOKE | BITMAP1;
		explode jet3 type FALL | FIRE | SMOKE | BITMAP2;
		explode link type FALL | FIRE | SMOKE | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode thruster1 type FALL | FIRE | SMOKE | BITMAP1;
		explode thruster2 type FALL | FIRE | SMOKE | BITMAP2;
		explode thruster3 type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode jet1 type FALL | FIRE | SMOKE | BITMAP5;
		explode jet2 type FALL | FIRE | SMOKE | BITMAP1;
		explode jet3 type FALL | FIRE | SMOKE | BITMAP2;
		explode link type FALL | FIRE | SMOKE | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode thruster1 type FALL | FIRE | SMOKE | BITMAP1;
		explode thruster2 type FALL | FIRE | SMOKE | BITMAP2;
		explode thruster3 type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode jet1 type FALL | FIRE | SMOKE | BITMAP5;
		explode jet2 type FALL | FIRE | SMOKE | BITMAP1;
		explode jet3 type FALL | FIRE | SMOKE | BITMAP2;
		explode link type FALL | FIRE | SMOKE | BITMAP1;
		return (0);
	}
	corpsetype = 3;
		explode thruster1 type FALL | FIRE | SMOKE | BITMAP1;
		explode thruster2 type FALL | FIRE | SMOKE | BITMAP2;
		explode thruster3 type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode jet1 type FALL | FIRE | SMOKE | BITMAP5;
		explode jet2 type FALL | FIRE | SMOKE | BITMAP1;
		explode jet3 type FALL | FIRE | SMOKE | BITMAP2;
		explode link type FALL | FIRE | SMOKE | BITMAP1;
}
