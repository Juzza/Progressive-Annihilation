#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  hole1, hole2, turret, launcher, base, muzzler, muzzlel, muzzleb1, muzzleb2;

static-var  restore_delay, gun_1, gun_2;

// Signal definitions
#define SIG_AIM	2
#define SIG_LOCK 4

LockTurret(heading)
{
	set-signal-mask SIG_LOCK;
	
	while(1)
	{
		turn turret to y-axis (heading - get HEADING) speed (get 1030);
		sleep 20;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	hide hole1;
	hide hole2;
	hide muzzler;
	hide muzzlel;
	hide muzzleb1;
	hide muzzleb2;
	gun_1 = 1;
	gun_2 = 0;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep 8500;
	signal SIG_LOCK;
	turn turret to y-axis <0.000000> speed (get 1030);
	turn launcher to x-axis <0.000000> speed (get 1031);
}

FireWeapon1() {
	gun_1 = -1;
	gun_2 = 1;
	
	if ( gun_1 == 0)
	{
	emit-sfx 1024 from muzzler;
	emit-sfx 1025 from muzzleb1;
	}
	if ( gun_2 == 1)
	{
	emit-sfx 1024 from muzzlel;
	emit-sfx 1025 from muzzleb2;
	}
}

Shot1() {
	if (gun_2)
	{
		++gun_1;
	}
	gun_2 = !gun_2;
}

AimPrimary(heading, pitch)
{
	signal SIG_LOCK;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	var absHeading;
	absHeading = heading + get HEADING;
	
	turn turret to y-axis heading speed (get 1030);
	turn launcher to x-axis <0.000000> - pitch speed (get 1031);
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	
	start-script LockTurret(absHeading);
	start-script RestoreAfterDelay();
	
	return (1);
}



AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if (gun_1 >= 0 && gun_1 < 2) {
		if (gun_2)
		{
			piecenum = (hole1 + gun_1);
		} else {
			piecenum = (hole2 + gun_1);
		}
	} else {
		piecenum = turret;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide hole1;
	hide hole2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode hole1 type BITMAPONLY | BITMAP3;
		explode hole2 type BITMAPONLY | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode hole1 type FALL | BITMAP3;
		explode hole2 type FALL | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode hole1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode hole2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode hole1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode hole2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
