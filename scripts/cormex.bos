#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, teeth1, teeth2, teeth3, teeth4, top, iris,
       blade1, blade2, blade3, blade4, blade5, blade6, blade7, blade8,
       blade9, blade10, blade11, blade12, blade13, blade14, blade15, blade16,
       rotary, grinder1, grinder2, cap;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set ARMORED to 0;
	hide cap;
	show blade1;
	show blade2;
	show blade3;
	show blade4;
	show blade5;
	show blade6;
	show blade7;
	show blade8;
	show blade9;
	show blade10;
	show blade11;
	show blade12;
	show blade13;
	show blade14;
	show blade15;
	show blade16;
	dont-cache blade1;
	dont-cache blade2;
	dont-cache blade3;
	dont-cache blade4;
	dont-cache blade5;
	dont-cache blade6;
	dont-cache blade7;
	dont-cache blade8;
	dont-cache blade9;
	dont-cache blade10;
	dont-cache blade11;
	dont-cache blade12;
	dont-cache blade13;
	dont-cache blade14;
	dont-cache blade15;
	dont-cache blade16;
	dont-cache teeth1;
	dont-cache teeth2;
	dont-cache teeth3;
	dont-cache teeth4;
	dont-cache grinder1;
	dont-cache grinder2;
	move iris to y-axis [-2.] speed [10.];
	wait-for-move iris along y-axis;
	turn blade1 to y-axis <60.> speed <20.>;
	turn blade2 to y-axis <60.> speed <20.>;
	turn blade3 to y-axis <60.> speed <20.>;
	turn blade4 to y-axis <60.> speed <20.>;
	turn blade5 to y-axis <60.> speed <20.>;
	turn blade6 to y-axis <60.> speed <20.>;
	turn blade7 to y-axis <60.> speed <20.>;
	turn blade8 to y-axis <60.> speed <20.>;
	turn blade9 to y-axis <60.> speed <20.>;
	turn blade10 to y-axis <60.> speed <20.>;
	turn blade11 to y-axis <60.> speed <20.>;
	turn blade12 to y-axis <60.> speed <20.>;
	turn blade13 to y-axis <60.> speed <20.>;
	turn blade14 to y-axis <60.> speed <20.>;
	turn blade15 to y-axis <60.> speed <20.>;
	turn blade16 to y-axis <60.> speed <20.>;
	spin teeth1 around y-axis speed Static_Var_1 accelerate <4.>;
	spin teeth2 around y-axis speed Static_Var_1 accelerate <2.>;
	spin teeth3 around y-axis speed Static_Var_1 accelerate <1.>;
	spin teeth4 around y-axis speed Static_Var_1 accelerate <1.>;
	spin grinder1 around z-axis speed Static_Var_1 accelerate <1.>;
	spin grinder2 around z-axis speed Static_Var_2 accelerate <1.>;
}

Stop()
{
	stop-spin teeth1 around y-axis;
	stop-spin teeth2 around y-axis;
	stop-spin teeth3 around y-axis;
	stop-spin teeth4 around y-axis;
	stop-spin grinder1 around x-axis;
	stop-spin grinder2 around x-axis;
	turn blade1 to y-axis <0.> speed <20.>;
	turn blade2 to y-axis <0.> speed <20.>;
	turn blade3 to y-axis <0.> speed <20.>;
	turn blade4 to y-axis <0.> speed <20.>;
	turn blade5 to y-axis <0.> speed <20.>;
	turn blade6 to y-axis <0.> speed <20.>;
	turn blade7 to y-axis <0.> speed <20.>;
	turn blade8 to y-axis <0.> speed <20.>;
	turn blade9 to y-axis <0.> speed <20.>;
	turn blade10 to y-axis <0.> speed <20.>;
	turn blade11 to y-axis <0.> speed <20.>;
	turn blade12 to y-axis <0.> speed <20.>;
	turn blade13 to y-axis <0.> speed <20.>;
	turn blade14 to y-axis <0.> speed <20.>;
	turn blade15 to y-axis <0.> speed <20.>;
	turn blade16 to y-axis <0.> speed <20.>;
	sleep 2000;
	move iris to y-axis [0.] speed [10.];
	wait-for-move iris along y-axis;
	cache blade1;
	cache blade2;
	cache blade3;
	cache blade4;
	cache blade5;
	cache blade6;
	cache blade7;
	cache blade8;
	cache blade9;
	cache blade10;
	cache blade11;
	cache blade12;
	cache blade13;
	cache blade14;
	cache blade15;
	cache blade16;
	cache teeth1;
	cache teeth2;
	cache teeth3;
	cache teeth4;
	cache grinder1;
	cache grinder2;
	hide blade1;
	hide blade2;
	hide blade3;
	hide blade4;
	hide blade5;
	hide blade6;
	hide blade7;
	hide blade8;
	hide blade9;
	hide blade10;
	hide blade11;
	hide blade12;
	hide blade13;
	hide blade14;
	hide blade15;
	hide blade16;
	show cap;
	set ARMORED to 1;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	hide blade1;
	hide blade2;
	hide blade3;
	hide blade4;
	hide blade5;
	hide blade6;
	hide blade7;
	hide blade8;
	hide blade9;
	hide blade10;
	hide blade11;
	hide blade12;
	hide blade13;
	hide blade14;
	hide blade15;
	hide blade16;
	dont-shade cap;
	dont-shade teeth1;
	dont-shade teeth2;
	dont-shade teeth3;
	dont-shade teeth4;
	dont-shade grinder1;
	dont-shade grinder2;
	dont-shade top;
	dont-shade blade1;
	dont-shade blade2;
	dont-shade blade3;
	dont-shade blade4;
	dont-shade blade5;
	dont-shade blade6;
	dont-shade blade7;
	dont-shade blade8;
	dont-shade blade9;
	dont-shade blade10;
	dont-shade blade11;
	dont-shade blade12;
	dont-shade blade13;
	dont-shade blade14;
	dont-shade blade15;
	dont-shade blade16;
	set ARMORED to 0;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * -22;
	Static_Var_2 = Func_Var_1 * 22;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
	}
	corpsetype = 3;
}
