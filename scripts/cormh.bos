#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lmispoint, rmispoint, base, arm1, arm2, launcher, wake1, wake2,
       wake3, wake4, wake5, wake6, wake7, wake8;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Create()
{
	Static_Var_2 = 0;
	Static_Var_1 = 0;
	Static_Var_4 = 3000;
	start-script SmokeUnit();
}

StartMoving()
{
	signal 4;
	set-signal-mask 4;
	while( TRUE )
	{
		if( Static_Var_3 == 1 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		if( Static_Var_3 == 2 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

RestoreAfterDelay()
{
	sleep Static_Var_4;
	set-signal-mask 0;
	turn arm1 to x-axis <0> speed <21>;
	turn arm2 to x-axis <0> speed <55>;
	turn arm2 to y-axis <0> speed <55>;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn arm1 to x-axis <21> speed <42>;
	turn arm2 to x-axis <-55> speed <110>;
	wait-for-turn arm1 around x-axis;
	turn arm2 to y-axis heading speed <80>;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_2 == 0 )
	{
		Static_Var_2 = 1;
		return (0);
	}
	if( Static_Var_2 == 1 )
	{
		Static_Var_2 = 1;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = launcher;
}

QueryPrimary(piecenum)
{
	if( Static_Var_2 == 0 )
	{
		piecenum = lmispoint;
	}
	if( Static_Var_2 == 1 )
	{
		piecenum = rmispoint;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( Static_Var_3 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode arm1 type FALL | BITMAP1;
			explode arm2 type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP2;
			explode lmispoint type FALL | BITMAP3;
			explode rmispoint type FALL | BITMAP3;
			explode launcher type SHATTER | BITMAP4;
			return (0);
		}
		corpsetype = 3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		return (0);
	}
	if( Static_Var_3 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode arm1 type FALL | BITMAP1;
			explode arm2 type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP2;
			explode lmispoint type FALL | BITMAP3;
			explode rmispoint type FALL | BITMAP3;
			explode launcher type SHATTER | BITMAP4;
			return (0);
		}
		corpsetype = 3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lmispoint type BITMAPONLY | BITMAP3;
		explode rmispoint type BITMAPONLY | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type FALL | BITMAP1;
		explode arm2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lmispoint type FALL | BITMAP3;
		explode rmispoint type FALL | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
