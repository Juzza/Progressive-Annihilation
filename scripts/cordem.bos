#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, torso, spines, neck, spikes, rtubes, ltubes, head, horns, shoulders, luparm, lloarm, lflamegun, lflame, ruparm, rloarm, rflamegun, rflame, pack, rthigh, rleg, rfoot, lthigh, lleg, lfoot,
		smoke1, smoke2, smoke3, smoke4;

static-var  restore_delay, Static_Var_9, bmoving, baiming;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_LOCK 			8

LockTurret(heading)
{
	set-signal-mask SIG_LOCK;
	
	while(1)
	{
		turn torso to y-axis (heading - get HEADING) speed (get 1030);
		sleep 20;
	}
}

lua_FlameShot(weapon) //Distortion and lups flame effect
{
  return 0;
}

walk(smoketype)
{
	smoketype = 256 | 2;
	if( bmoving )
	{
		turn lleg to x-axis <15.> speed <110>; 		turn lfoot to x-axis <-15.> speed <110>;
		
		turn lthigh to x-axis <20.> speed <60>;
		turn rthigh to x-axis <-20.> speed <55>;
		turn rleg to x-axis <-15.> speed <115>;		turn rfoot to x-axis <15.> speed <115>;
			emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke4;
		    emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke4;
		sleep 500;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		turn rleg to x-axis <15.> speed <105>;		turn rfoot to x-axis <-15.> speed <105>;
	
		sleep 200;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
	}
	while( bmoving )
	{
		if( bmoving )
		{
			turn rthigh to x-axis <30.> speed <55>;
			turn lthigh to x-axis <-30.> speed <60>;
			turn lleg to x-axis <-20.> speed <110>;			turn lfoot to x-axis <20.> speed <110>;
			emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
		    emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
			sleep 700;
			emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
			turn lleg to x-axis <20.> speed <110>;			turn lfoot to x-axis <-20.> speed <110>;
			
			sleep 400;
		    emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		}
		if( bmoving )
		{
			turn lthigh to x-axis <30.> speed <60>;
			turn rthigh to x-axis <-30.> speed <55>;
			turn rleg to x-axis <-20.> speed <115>;			turn rfoot to x-axis <20.> speed <115>;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke3;
			sleep 700;
		    emit-sfx smoketype from smoke4;
			turn rleg to x-axis <20.> speed <105>;			turn rfoot to x-axis <-20.> speed <105>;

			sleep 400;
		    emit-sfx smoketype from smoke4;
		}
	}
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

IdleCheck(smoketype)
{
	while (1)
	{
		sleep 3000;
			emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
		    emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
		sleep 100;
			emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
		sleep 6000;
			emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
		    emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
		sleep 100;
			emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
		sleep 3000;
		if (!bMoving AND !bAiming)
		{
			smoketype = 256 | 2;
		    emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
			turn neck to y-axis <7.5> speed <10>;
			turn head to y-axis <7.5> speed <50>;
			wait-for-turn neck around y-axis;
			wait-for-turn head around y-axis;
		    emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
			turn neck to y-axis <-7.5> speed <10>;
			turn head to y-axis <-7.5> speed <50>;
		    emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
			wait-for-turn neck around y-axis;
			wait-for-turn head around y-axis;
			turn neck to y-axis <0> speed <10>;
			turn head to y-axis <0> speed <10>;
			wait-for-turn neck around y-axis;
			wait-for-turn head around y-axis;
		    emit-sfx smoketype from smoke1;
		    emit-sfx smoketype from smoke2;
		    emit-sfx smoketype from smoke3;
		    emit-sfx smoketype from smoke4;
			
		}
		turn neck to y-axis <0> speed <10>;
		turn head to y-axis <0> speed <7>;
		wait-for-turn neck around y-axis;
		emit-sfx smoketype from smoke1;
		emit-sfx smoketype from smoke2;
		emit-sfx smoketype from smoke3;
		emit-sfx smoketype from smoke4;
		emit-sfx smoketype from smoke4;
		wait-for-turn head around y-axis;
		emit-sfx smoketype from smoke4;
		sleep 10;
	}
}

Create()
{
	hide rflame;
	hide lflame;
	bMoving = 0;
	baiming = 0;
	Static_Var_9 = 0;
	restore_delay = 5000;
	set ARMORED to TRUE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script IdleCheck();
}

StartMoving()
{
	bMoving = 1;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	bMoving = 0;
	signal SIG_MOVE;
	turn lthigh to x-axis <0.> speed <100.>;
	turn rthigh to x-axis <0.> speed <100.>;
	turn lleg to x-axis <0.> speed <200.>;
	turn rleg to x-axis <0.> speed <200.>;
	
	turn lthigh to z-axis <0.> speed <100.>;
	turn rthigh to z-axis <0.> speed <100.>;
	turn lleg to z-axis <0.> speed <200.>;
	turn rleg to z-axis <0.> speed <200.>;
	
	move pelvis to y-axis [0.] speed [40.];
	turn pelvis to z-axis <0.> now;
	
	turn rfoot to x-axis <0.> speed <200.>;
	turn lfoot to x-axis <0.> speed <200.>;	
	turn rfoot to z-axis <0.> speed <200.>;
	turn lfoot to z-axis <0.> speed <200.>;
}

RestoreAfterDelay()
{
    sleep 500;
	stop-spin lflamegun around z-axis decelerate <3.000000>;
	stop-spin rflamegun around z-axis decelerate <3.000000>;
	sleep restore_delay;
	
	signal SIG_LOCK;
	set-signal-mask 0;
	
	turn torso to y-axis <0.000000> speed <80>;
	turn torso to x-axis <0.000000> speed <80>;
	wait-for-turn torso around y-axis;
	baiming = 0;
}

AimPrimary(heading, pitch)
{
	signal SIG_LOCK;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	var absHeading;
	absHeading = heading + get HEADING;
	
	baiming = 1;
	turn torso to y-axis heading speed (get 1030);
	turn torso to x-axis <0.000000> - pitch speed 150;
	wait-for-turn torso around y-axis;
	spin lflamegun around z-axis speed <300.000000> accelerate <35.000000>;
	spin rflamegun around z-axis speed <300.000000> accelerate <35.000000>;
	
	start-script LockTurret(absHeading);
	start-script RestoreAfterDelay();
	
	return (1);
}

Shot1()
{
	call-script lua_FlameShot(1);
	return (TRUE);
}

FirePrimary(smoketype)
{
	if( Static_Var_9 == 0 )
	{
	}
	if( Static_Var_9 == 1 )
	{
	}
	Static_Var_9 = !Static_Var_9;
	
	smoketype = 256 | 2;
	emit-sfx smoketype from smoke1;
	emit-sfx smoketype from smoke2;
	emit-sfx smoketype from smoke3;
	emit-sfx smoketype from smoke4;

	     emit-sfx 1024 from rflame;
		 emit-sfx 1024 from lflame;
   sleep 1;
         emit-sfx 1024 from rflame;
         emit-sfx 1024 from lflame;
   sleep 8;
         emit-sfx 1024 from rflame;
         emit-sfx 1024 from lflame;
   sleep 16;
         emit-sfx 1024 from rflame;
         emit-sfx 1024 from lflame;
   sleep 24;
         emit-sfx 1024 from rflame;
         emit-sfx 1024 from lflame;
   sleep 32;
         emit-sfx 1024 from rflame;
         emit-sfx 1024 from lflame;
   sleep 40;
         emit-sfx 1024 from rflame;
         emit-sfx 1024 from lflame;

}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	if( Static_Var_9 == 0 )
	{
		piecenum = lflame;
		return (0);
	}
	if( Static_Var_9 == 1 )
	{
		piecenum = rflame;
		return (0);
	}
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode head type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode lloarm type BITMAPONLY | BITMAP2;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode luparm type BITMAPONLY | BITMAP1;
		explode rloarm type BITMAPONLY | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rthigh type BITMAPONLY | BITMAP2;
		explode ruparm type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode head type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode lloarm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;

		explode lleg type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode luparm type BITMAPONLY | BITMAP1;
		explode rloarm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP2;
		explode ruparm type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode head type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode lloarm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode luparm type BITMAPONLY | BITMAP1;
		explode rloarm type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP2;
		explode ruparm type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode head type BITMAPONLY | BITMAP4;
	explode pelvis type BITMAPONLY | BITMAP1;
	explode lloarm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lleg type BITMAPONLY | BITMAP1;
	explode lthigh type BITMAPONLY | BITMAP2;
	explode luparm type BITMAPONLY | BITMAP1;
	explode rloarm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type BITMAPONLY | BITMAP2;
	explode ruparm type BITMAPONLY | BITMAP1;
}



