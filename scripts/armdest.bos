#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare2a, flare2b,
       base, turret1, wake1, wake2, barrel1a, barrel1b, barrel2a, barrel2b,
       turret2, bridge, radar, flak1, flaksleeve1, flakbarrel1a,
       flakbarrel1b, flakflare1a, flakflare1b, flak2, flaksleeve2, flakbarrel2a, flakbarrel2b, flakflare2a,
       flakflare2b, sam, samlauncher, flaresam1, flaresam2,
       uwfirep, torpedobox, torpedo6, torpedo7, muzzleL;

static-var  gun_1, gun_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, restore_delay, Static_Var_9, oldHead;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			32

SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn base to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.25> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*2;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = flare1a;
	gun_2 = flare1a;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	Static_Var_7 = 0;
	hide muzzleL;
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	hide flaresam1;
	hide flaresam2;
	hide flakflare1b;
	hide flakflare1a;
	hide flakflare2b;
	hide flakflare2a;
	move uwfirep to z-axis [-15] now;
	turn turret2 to y-axis <180.> now;
	spin radar around y-axis speed <100.>;
	restore_delay = 3000;
	Static_Var_9 = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.> speed <35.>;
	turn turret1 to x-axis <0.> speed <15.>;
	turn turret2 to y-axis <180.> speed <35.>;
	turn turret2 to x-axis <0.> speed <15.>;
}

RestoreAfterDelay2()
{
	sleep Static_Var_9;
	turn flak1 to y-axis <0.> speed <60.>;
	turn flaksleeve1 to x-axis <0.> speed <40.>;
	turn flak2 to y-axis <0.> speed <60.>;
	turn flaksleeve2 to x-axis <0.> speed <40.>;
	turn sam to y-axis <0.> speed <60.>;
	turn samlauncher to x-axis <0.> speed <40.>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.> speed <1.0>;
		move base to y-axis [0.23] speed [0.17];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <1.0>;
		move base to y-axis [0.0] speed [0.17];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <1.0>;
	move base to y-axis [0.0] speed [0.17];
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <70.>;
	turn turret1 to x-axis <0.> - pitch speed <40.>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <70.>;
	turn turret2 to x-axis <0.> - pitch speed <40.>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon3(Func_Var_1)
{
	signal 16;
	set-signal-mask 16;
	return (1);
}


AimWeapon4(Func_Var_1, Func_Var_2)
{
	signal 64;
	set-signal-mask 64;
	turn flak1 to y-axis Func_Var_1 speed <180.>;
	turn flaksleeve1 to x-axis <0.> - Func_Var_2 speed <90.>;
	wait-for-turn flak1 around y-axis;
	wait-for-turn flaksleeve1 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

AimWeapon5(Func_Var_1, Func_Var_2)
{
	signal 128;
	set-signal-mask 128;
	turn flak2 to y-axis Func_Var_1 speed <180.>;
	turn flaksleeve2 to x-axis <0.> - Func_Var_2 speed <90.>;
	wait-for-turn flak2 around y-axis;
	wait-for-turn flaksleeve2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

AimWeapon6(Func_Var_1, Func_Var_2)
{
	signal 256;
	set-signal-mask 256;
	turn sam to y-axis Func_Var_1 speed <180.>;
	turn samlauncher to x-axis <0.> - Func_Var_2 speed <80.>;
	wait-for-turn sam around y-axis;
	wait-for-turn samlauncher around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1025 from flare1a;
		move barrel1a to z-axis [-6.] speed [1250.];
		wait-for-move barrel1a along z-axis;
		move barrel1a to z-axis [0.] speed [8.];
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1025 from flare1b;
		move barrel1b to z-axis [-6.] speed [1250.];
		wait-for-move barrel1b along z-axis;
		move barrel1b to z-axis [0.] speed [8.];
	}
	gun_1 = !gun_1;
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		emit-sfx 1025 from flare2a;
		move barrel2a to z-axis [-6.] speed [1250.];
		wait-for-move barrel2a along z-axis;
		move barrel2a to z-axis [0.] speed [8.];
	}
	if( gun_2 == 1 )
	{
		emit-sfx 1025 from flare2b;
		move barrel2b to z-axis [-6.] speed [1250.];
		wait-for-move barrel2b along z-axis;
		move barrel2b to z-axis [0.] speed [8.];
	}
	gun_2 = !gun_2;
}

FireWeapon3()
{
	move torpedo6 to z-axis [2.1] now;
	move torpedo7 to z-axis [2.1] now;
	move torpedo6 to z-axis [0] speed [0.75];
	move torpedo7 to z-axis [0] speed [0.75];
	sleep 100;
}

FireWeapon4()
{
	if( Static_Var_5 == 0 )
	{
		emit-sfx 1024 from flakflare2a;
		move flakbarrel1a to z-axis [-2.] speed [1250.];
		wait-for-move flakbarrel1a along z-axis;
		move flakbarrel1a to z-axis [0.] speed [3.];
	}
	if( Static_Var_5 == 1 )
	{
		emit-sfx 1024 from flakflare2b;
		move flakbarrel1b to z-axis [-2.] speed [1250.];
		wait-for-move flakbarrel1b along z-axis;
		move flakbarrel1b to z-axis [0.] speed [3.];
	}
	Static_Var_5 = !Static_Var_5;
}

FireWeapon5()
{
	if( Static_Var_6 == 0 )
	{
		emit-sfx 1024 from flakflare1a;
		move flakbarrel2a to z-axis [-2.] speed [1250.];
		wait-for-move flakbarrel2a along z-axis;
		move flakbarrel2a to z-axis [0.] speed [3.];
	}
	if( Static_Var_6 == 1 )
	{
		emit-sfx 1024 from flakflare1b;
		move flakbarrel2b to z-axis [-2.] speed [1250.];
		wait-for-move flakbarrel2b along z-axis;
		move flakbarrel2b to z-axis [0.] speed [3.];
	}
	Static_Var_6 = !Static_Var_6;
}

FireWeapon6()
{
	if( Static_Var_7 == 0 )
	{
	emit-sfx 1026 from flaresam1;
	}
	if( Static_Var_7 == 1 )
	{
	emit-sfx 1026 from flaresam2;
	}
	Static_Var_7 = !Static_Var_7;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

AimFrom3(Func_Var_1)
{
	Func_Var_1 = uwfirep;
}

AimFrom4(Func_Var_1)
{
	Func_Var_1 = flak1;
}

AimFrom5(Func_Var_1)
{
	Func_Var_1 = flak2;
}

AimFrom6(Func_Var_1)
{
	Func_Var_1 = sam;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	else
	{
		piecenum = flare1b;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare2a;
	}
	else
	{
		piecenum = flare2b;
	}
}

QueryWeapon3(piecenum)
{
	piecenum = muzzleL;
}

QueryWeapon4(Func_Var_1)
{
	if( Static_Var_5 == 0 )
	{
		Func_Var_1 = flakflare1a;
	}
	if( Static_Var_5 == 1 )
	{
		Func_Var_1 = flakflare1b;
	}
}

QueryWeapon5(Func_Var_1)
{
	if( Static_Var_6 == 0 )
	{
		Func_Var_1 = flakflare2a;
	}
	if( Static_Var_6 == 1 )
	{
		Func_Var_1 = flakflare2b;
	}
}

QueryWeapon6(Func_Var_1)
{
	if( Static_Var_7 == 0 )
	{
		Func_Var_1 = flaresam1;
	}
	if( Static_Var_7 == 1 )
	{
		Func_Var_1 = flaresam2;
	}
}

SweetSpot(piecenum)
{
	piecenum = bridge;
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare2a;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode flare1a type BITMAPONLY | BITMAP1;
		explode barrel1a type BITMAPONLY | BITMAP1;
		explode barrel2a type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1a type BITMAPONLY | BITMAP4;
		explode flare2a type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode barrel1a type FALL | BITMAP1;
		explode barrel2a type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1a type FALL | BITMAP4;
		explode flare2a type FALL | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake2 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 1;
		explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret1 type SHATTER | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 1;
	explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
