#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece   turret, base, msleeve, turret2, canon2, muzzle2,
		shell2, flare2, canon2a, turret3, canon3, muzzle3, shell3, flare3,
		canon3a, sleeve, canon1, muzzle1, shell1, flare1, canon1a;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;
static-var AbsTurretHeadingGoal;

#define SIG_AIM	2
#define SIG_LOCK 4
#define SIG_AIM2	8
#define SIG_LOCK2 16
#define SIG_AIM3	32
#define SIG_LOCK3 64

LockTurret(heading)
{
	set-signal-mask SIG_LOCK;
	
	while(1)
	{
		turn turret to y-axis (heading - get HEADING) speed (get 1030);
		sleep 20;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;	
	hide muzzle1;
	hide muzzle2;
	hide muzzle3;
	hide shell1;
	hide shell2;
	hide shell3;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 5000;
	signal SIG_LOCK;
	turn turret to y-axis <0.> speed <60.>;
	turn turret2 to y-axis <0.> speed <60.>;
	turn turret3 to y-axis <0.> speed <60.>;
	turn sleeve to x-axis <0.> speed <80.>;
	spin canon1a around z-axis speed <0.>;
	spin canon2a around z-axis speed <0.>;
	spin canon3a around z-axis speed <0.>;
}

AimPrimary(heading, pitch)
{
	signal SIG_LOCK;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	AbsTurretHeadingGoal = heading + get HEADING;
	
	spin canon1a around z-axis speed <600.>;
	turn turret to y-axis heading speed (get 1030);
	turn sleeve to x-axis <0> - pitch speed (get 1031);
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	
	start-script LockTurret(AbsTurretHeadingGoal);
	start-script RestoreAfterDelay();
	
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	
	spin canon2a around z-axis speed <600.>;
	turn turret2 to y-axis (heading - (AbsTurretHeadingGoal - get HEADING)) speed (get 1030);
	turn canon2 to x-axis <0> - pitch speed (get 1031);
	wait-for-turn turret2 around y-axis;
	wait-for-turn canon2 around x-axis;
	
	start-script RestoreAfterDelay();
	
	return (1);
}

AimTertiary(heading, pitch)

{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	
	spin canon3a around z-axis speed <600.>;
	turn turret3 to y-axis (heading - (AbsTurretHeadingGoal - get HEADING)) speed (get 1030);
	turn canon3 to x-axis <0> - pitch speed (get 1031);
	wait-for-turn turret3 around y-axis;
	wait-for-turn canon3 around x-axis;
	
	start-script RestoreAfterDelay();
	
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from muzzle1;
	sleep 66;
	emit-sfx 1024 from muzzle1;
	sleep 66;
	emit-sfx 1024 from muzzle1;
	sleep 66;
	emit-sfx 1024 from muzzle1;
	sleep 66;
}

FireSecondary()
{
	emit-sfx 1024 from muzzle2;
	sleep 66;
	emit-sfx 1024 from muzzle2;
	sleep 66;
	emit-sfx 1024 from muzzle2;
	sleep 66;
	emit-sfx 1024 from muzzle2;
	sleep 66;
}

FireTertiary()
{
	emit-sfx 1024 from muzzle3;
	sleep 66;
	emit-sfx 1024 from muzzle3;
	sleep 66;
	emit-sfx 1024 from muzzle3;
	sleep 66;
	emit-sfx 1024 from muzzle3;
	sleep 66;
}

QueryPrimary(piecenum)
{
	piecenum = muzzle1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QuerySecondary(piecenum)
{
	piecenum = muzzle2;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

QueryTertiary(piecenum)
{
	piecenum = muzzle3;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode canon1 type BITMAPONLY | BITMAP1;
		explode canon2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode canon1 type FALL | BITMAP1;
		explode canon2 type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | BITMAP4;
		explode flare2 type FALL | BITMAP5;
		explode sleeve type SHATTER | BITMAP1;
		explode turret type FALL | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode canon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode canon2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeve type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode canon2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode canon2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
