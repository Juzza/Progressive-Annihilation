#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece	flare1, flare2, flare3, flare4, turret1, turret2, turret3, turret4,
		sleeve1, sleeve2, sleeve3, sleeve4, barrel1, barrel2, barrel3, barrel4,
		wake1, wake2, ground, bridge, radar, uw_firep, hull,
		flak1, flaksleeve1, flakbarrel1a, flakbarrel1b, flakflare1a, flakflare1b; 
		
static-var  gun_1, gun_2, gun_3, restore_delay, oldHead;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_MOVE			32
#define SIG_AIM_5			64
#define SIG_AIM_6			128
#define SIG_AIM_7			256
#define SIG_AIM_8			512

SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn hull to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.25> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*2;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from bridge;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flakflare1a;
	hide flakflare1b;
	turn turret3 to y-axis <180.000000> now;
	turn turret4 to y-axis <180.000000> now;
	spin radar around y-axis speed <100.000000>;
	restore_delay = 3000;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <35.005495>;
	turn sleeve1 to x-axis <0.000000> speed <15.000000>;
	turn turret2 to y-axis <0.000000> speed <35.005495>;
	turn sleeve2 to x-axis <0.000000> speed <15.000000>;
	turn turret3 to y-axis <180.000000> speed <35.005495>;
	turn sleeve3 to x-axis <0.000000> speed <15.000000>;
	turn turret4 to y-axis <180.000000> speed <35.005495>;
	turn sleeve4 to x-axis <0.000000> speed <15.000000>;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn flak1 to y-axis <0.000000> speed <60.005495>;
	turn flaksleeve1 to x-axis <0.000000> speed <40.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn hull to x-axis <-1.> speed <1.0>;
		move hull to y-axis [0.23] speed [0.17];
		wait-for-turn hull around x-axis;
		turn hull to x-axis <0.0> speed <1.0>;
		move hull to y-axis [0.0] speed [0.17];
		wait-for-turn hull around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn hull to x-axis <0.0> speed <1.0>;
	move hull to y-axis [0.0] speed [0.17];
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <70.016484>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <40.005495>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <70.016484>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <40.005495>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <70.016484>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <40.005495>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn turret4 to y-axis heading speed <70.016484>;
	turn sleeve4 to x-axis <0.000000> - pitch speed <40.005495>;
	wait-for-turn turret4 around y-axis;
	wait-for-turn sleeve4 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	return (1);
}

AimWeapon6(heading, pitch)
{
	signal SIG_AIM_6;
	set-signal-mask SIG_AIM_6;
	turn flak1 to y-axis heading speed <180.016484>;
	turn flaksleeve1 to x-axis <0> - pitch speed <90>;
	wait-for-turn flak1 around y-axis;
	wait-for-turn flaksleeve1 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FirePrimary()
{
	emit-sfx 1025 from flare1;
	move sleeve1 to z-axis [-1.000000] speed [400.000000];
	move barrel1 to z-axis [-1.500000] speed [400.000000];
	turn sleeve1 to x-axis <-5.000000> speed <55.000000>;
	wait-for-turn sleeve1 around x-axis;
	turn sleeve1 to x-axis <0.000000> speed <30.000000>;
	move sleeve1 to z-axis [0.000000] speed [4.000000];
	move barrel1 to z-axis [0.000000] speed [5.000000];
}

FireSecondary()
{
	emit-sfx 1025 from flare2;
	move sleeve2 to z-axis [-1.000000] speed [400.000000];
	move barrel2 to z-axis [-1.500000] speed [400.000000];
	turn sleeve2 to x-axis <-5.000000> speed <55.000000>;
	wait-for-turn sleeve2 around x-axis;
	turn sleeve2 to x-axis <0.000000> speed <30.000000>;
	move sleeve2 to z-axis [0.000000] speed [4.000000];
	move barrel2 to z-axis [0.000000] speed [5.000000];
}

FireWeapon3()
{
	emit-sfx 1025 from flare3;
	move sleeve3 to z-axis [-1.000000] speed [400.000000];
	move barrel3 to z-axis [-1.500000] speed [400.000000];
	turn sleeve3 to x-axis <-5.000000> speed <55.000000>;
	wait-for-turn sleeve3 around x-axis;
	turn sleeve3 to x-axis <0.000000> speed <30.000000>;
	move sleeve3 to z-axis [0.000000] speed [4.000000];
	move barrel3 to z-axis [0.000000] speed [5.000000];
}

FireWeapon4()
{	emit-sfx 1025 from flare4;
	move sleeve4 to z-axis [-1.000000] speed [400.000000];
	move barrel4 to z-axis [-1.500000] speed [400.000000];
	turn sleeve4 to x-axis <-5.000000> speed <55.000000>;
	wait-for-turn sleeve4 around x-axis;
	turn sleeve4 to x-axis <0.000000> speed <30.000000>;
	move sleeve4 to z-axis [0.000000] speed [4.000000];
	move barrel4 to z-axis [0.000000] speed [5.000000];
}

FireWeapon5()
{
}

FireWeapon6()
{
	if (gun_1 == 0) {
		move flakbarrel1a to z-axis [-0.60000] speed [500.000000];
		wait-for-move flakbarrel1a along z-axis;
		move flakbarrel1a to z-axis [0.000000] speed [1.000000];
	}
	if (gun_1 == 1) {
		move flakbarrel1b to z-axis [-0.60000] speed [500.000000];
		wait-for-move flakbarrel1b along z-axis;
		move flakbarrel1b to z-axis [0.000000] speed [1.000000];
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

AimFrom3(Func_Var_1)
{
	Func_Var_1 = turret3;
}

AimFrom4(Func_Var_1)
{
	Func_Var_1 = turret4;
}

AimFrom5(piecenum)
{
	piecenum = uw_firep;
}

AimFrom6(piecenum)
{
	piecenum = flak1;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

QueryWeapon3(piecenum)
{
	piecenum = flare3;
}

QueryWeapon4(piecenum)
{
	piecenum = flare4;
}

QueryWeapon5(piecenum)
{
	piecenum = uw_firep;
}

QueryWeapon6(piecenum)
{
	if (gun_1 == 0) {
		piecenum = flakflare1a;
	}
	if (gun_1 == 1) {
		piecenum = flakflare1b;
	}
}

SweetSpot(piecenum)
{
	piecenum = ground;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	explode barrel1 type BITMAPONLY | BITMAP1;
	explode barrel2 type BITMAPONLY | BITMAP2;
	explode ground type BITMAPONLY | BITMAP3;
	explode bridge type BITMAPONLY | BITMAP3;
	explode turret1 type BITMAPONLY | BITMAP2;
	explode barrel3 type BITMAPONLY | BITMAP3;
	explode turret3 type BITMAPONLY | BITMAP4;
	explode turret1 type BITMAPONLY | BITMAP4;
	explode turret2 type BITMAPONLY | BITMAP4;
}
