#define TA

#include "sfxtype.h"
#include "exptype.h"


piece base, blast, wakes, w1, w2, w3, w4, w5, w6, w7, w8, pad, 
	load_shoulder, load_arm, unload_shoulder, unload_arm, goal_shoulder, goal_arm, 
	hatch1, hatch2, hatch3, hatch4, p1, p2, p3, p4, firepoint, c1, c2, c3, c4, c5, c6, c7,
	translinkfront, translinkback, towerb,  towerf, flare1, flare2;

static-var  is_moving, Static_Var_3, Static_var_4, Static_Var_5, Static_var_7, Static_var_8;
						
// Signal definitions:
#define SIG_AIM 	2
#define SIG_AIM2 	4
#define SIG_AIM3 	8
#define SIG_MOVE 	32

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	Static_Var_4 = 0;
}

TransportPickup(unitid)
{
	if( Static_Var_5 == 0 )
	{
		attach-unit unitid to translinkfront;
		++Static_Var_5;
		Static_Var_7 = 1;
	}
	else if( Static_Var_5 == 1 )
	{
		attach-unit unitid to translinkback;
		++Static_Var_5;
		Static_Var_8 = 1;
	}
	start-script RequestState(0);
}



TransportDrop(Func_Var_1,xz,unitid)
{
	drop-unit Func_Var_1;
	drop-unit Func_Var_1;
	drop-unit Func_Var_1;
	Static_Var_5 = 0;
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	start-script RequestState(1);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	is_moving=TRUE;
	while( TRUE )
	{
		emit-sfx 1024 from w1;
		emit-sfx 1024 from w2;
		emit-sfx 1024 from w3;
		emit-sfx 1024 from w4;
		emit-sfx 1024 from w5;
		emit-sfx 1024 from w6;
		emit-sfx 1024 from w7;
		emit-sfx 1024 from w8;
		emit-sfx 1024 from w1;
		emit-sfx 1024 from w2;
		emit-sfx 1024 from w3;
		emit-sfx 1024 from w4;
		emit-sfx 1024 from w5;
		emit-sfx 1024 from w6;
		emit-sfx 1024 from w7;
		emit-sfx 1024 from w8;
		sleep 100;
	}
}

StopMoving()
{
	is_moving=FALSE;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide blast;
	hide p1;
	hide p2;
	hide p3;
	hide p4;
	is_moving=FALSE;
	sleep 70;
	while(get BUILD_PERCENT_LEFT)// Wait until the unit is fully built
		{
		sleep 200;
		}
	start-script SmokeUnit();
	start-script RequestState(0);
}

AimPrimary(heading, pitch)
{
	sleep 100;
	return (Static_Var_7);
}

FirePrimary()
{
	if( Static_Var_7 == 1 )
	{
		sleep 100;
	}
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

AimFromPrimary(piecenum)
{
	piecenum = flare1;
}

AimSecondary(heading, pitch)
{
	sleep 100;
	return (Static_Var_8);
}

FireSecondary()
{
	if( Static_Var_8 == 1 )
	{
		sleep 100;
	}
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

AimFromSecondary(piecenum)
{
	piecenum = flare2;
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = 1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode base type	BITMAPONLY | BITMAP1;
		explode towerf type	BITMAPONLY | BITMAP1;
		explode hatch1 type	BITMAPONLY | BITMAP1;
		explode hatch2 type	BITMAPONLY | BITMAP1;
		explode hatch3 type	BITMAPONLY | BITMAP1;
		explode hatch4 type	BITMAPONLY | BITMAP1;
		explode pad type	BITMAPONLY | BITMAP1;
		explode c1 type	BITMAPONLY | BITMAP1;
		explode c2 type	BITMAPONLY | BITMAP1;
		explode c3 type	BITMAPONLY | BITMAP1;
		explode c4 type	BITMAPONLY | BITMAP1;
		explode c5 type	BITMAPONLY | BITMAP1;
		explode c6 type	BITMAPONLY | BITMAP1;
		explode c7 type	BITMAPONLY | BITMAP1;
		return(0);
		}
	if (severity <= 50)
		{
		corpsetype = 2;
		explode base type	SHATTER | BITMAP4;
		explode towerf type	SHATTER | BITMAP4;
		explode hatch1 type	SHATTER | BITMAP4;
		explode hatch2 type	SHATTER | BITMAP4;
		explode hatch3 type	SHATTER | BITMAP4;
		explode hatch4 type	SHATTER | BITMAP4;
		explode pad type	SHATTER | BITMAP4;
		explode c1 type	SHATTER | BITMAP4;
		explode c2 type	SHATTER | BITMAP4;
		explode c3 type	SHATTER | BITMAP4;
		explode c4 type	SHATTER | BITMAP4;
		explode c5 type	SHATTER | BITMAP4;
		explode c6 type	SHATTER | BITMAP4;
		explode c7 type	SHATTER | BITMAP4;
		return(0);
		}
	if (severity <= 99)
		{
		corpsetype = 3;
		explode base type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode towerf type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hatch1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hatch2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hatch3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hatch4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pad type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c5 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c6 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c7 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return(0);
		}
	corpsetype = 3;
	explode base type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode towerf type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hatch1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hatch2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hatch3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hatch4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pad type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode c1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode c2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode c3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode c4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode c5 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode c6 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode c7 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return(0);
	}

